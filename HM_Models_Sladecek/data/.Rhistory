b_m$inc_ref=inc_ref(b=b_m)
# stacionarization
#t
b_m$tdfn=dfr(b_m$t_nest,i=1)
# odstranit pripadny vypadky loggeru (pak -46°C)
b_m$tdfn[abs(b_m$tdfn)>10]=0
b_m$tdfn[b_m$tdfn>0]=0
b_m$tdfn=ma(b_m$tdfn,msr_par$init_smw)
# long_break_stops
b_m$tdfp=dfr(b_m$t_nest,i=1)
b_m$tdfp[abs(b_m$tdfp)>10]=0
b_m$tdfp[b_m$tdfp<0]=0
b_m$tdfp=ma(b_m$tdfp,msr_par$init_smw)
b_m$tdfp[1:5]=0
# models
# is it next necesarry?
day=c(length(unique(as.Date(b_m$datetime_))):1)
b_m$day_order=day[match(as.Date(b_m$datetime),unique(as.Date(b_m$datetime)))]
# models
#t
b_m$init_inc=ifelse(b_m$tdfn<quantile(b_m$tdfn[b_m$tdfn!=0&b_m$tohmm==T],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
b_m$hmm_t[b_m$tohmm==T]=m$predstate-1#
# t_ends
b_m$init_inc=ifelse(b_m$tdfp>quantile(b_m$tdfp[b_m$tdfp!=0],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfp")),
data=as.data.frame(b_m),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order,
tolerance=2)
b_m$hmm_tl=m$predstate-1#
#save(b_m,file=paste(comp_data,file,sep="/"))
}
install.packages("zoo")
library(zoo)
if(nrow(b_m)>0){
# prepare model predictions
#{
# calculate reference inc
b_m$inc_ref=inc_ref(b=b_m)
# stacionarization
#t
b_m$tdfn=dfr(b_m$t_nest,i=1)
# odstranit pripadny vypadky loggeru (pak -46°C)
b_m$tdfn[abs(b_m$tdfn)>10]=0
b_m$tdfn[b_m$tdfn>0]=0
b_m$tdfn=ma(b_m$tdfn,msr_par$init_smw)
# long_break_stops
b_m$tdfp=dfr(b_m$t_nest,i=1)
b_m$tdfp[abs(b_m$tdfp)>10]=0
b_m$tdfp[b_m$tdfp<0]=0
b_m$tdfp=ma(b_m$tdfp,msr_par$init_smw)
b_m$tdfp[1:5]=0
# models
# is it next necesarry?
day=c(length(unique(as.Date(b_m$datetime_))):1)
b_m$day_order=day[match(as.Date(b_m$datetime),unique(as.Date(b_m$datetime)))]
# models
#t
b_m$init_inc=ifelse(b_m$tdfn<quantile(b_m$tdfn[b_m$tdfn!=0&b_m$tohmm==T],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
b_m$hmm_t[b_m$tohmm==T]=m$predstate-1#
# t_ends
b_m$init_inc=ifelse(b_m$tdfp>quantile(b_m$tdfp[b_m$tdfp!=0],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfp")),
data=as.data.frame(b_m),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order,
tolerance=2)
b_m$hmm_tl=m$predstate-1#
#save(b_m,file=paste(comp_data,file,sep="/"))
}
install.packages("mvnfast")
library(mvnfast)
if(nrow(b_m)>0){
# prepare model predictions
#{
# calculate reference inc
b_m$inc_ref=inc_ref(b=b_m)
# stacionarization
#t
b_m$tdfn=dfr(b_m$t_nest,i=1)
# odstranit pripadny vypadky loggeru (pak -46°C)
b_m$tdfn[abs(b_m$tdfn)>10]=0
b_m$tdfn[b_m$tdfn>0]=0
b_m$tdfn=ma(b_m$tdfn,msr_par$init_smw)
# long_break_stops
b_m$tdfp=dfr(b_m$t_nest,i=1)
b_m$tdfp[abs(b_m$tdfp)>10]=0
b_m$tdfp[b_m$tdfp<0]=0
b_m$tdfp=ma(b_m$tdfp,msr_par$init_smw)
b_m$tdfp[1:5]=0
# models
# is it next necesarry?
day=c(length(unique(as.Date(b_m$datetime_))):1)
b_m$day_order=day[match(as.Date(b_m$datetime),unique(as.Date(b_m$datetime)))]
# models
#t
b_m$init_inc=ifelse(b_m$tdfn<quantile(b_m$tdfn[b_m$tdfn!=0&b_m$tohmm==T],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
b_m$hmm_t[b_m$tohmm==T]=m$predstate-1#
# t_ends
b_m$init_inc=ifelse(b_m$tdfp>quantile(b_m$tdfp[b_m$tdfp!=0],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfp")),
data=as.data.frame(b_m),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order,
tolerance=2)
b_m$hmm_tl=m$predstate-1#
#save(b_m,file=paste(comp_data,file,sep="/"))
}
if (is.null(dens_mat) || is.null(deltas) || is.null(tpm)) {
stop("Uno de los objetos de entrada es nulo.")
}
# calculate reference inc
b_m$inc_ref=inc_ref(b=b_m)
# stacionarization
#t
b_m$tdfn=dfr(b_m$t_nest,i=1)
# To remove any logger outages (then -46°C)
b_m$tdfn[abs(b_m$tdfn)>10]=0
b_m$tdfn[b_m$tdfn>0]=0
b_m$tdfn=ma(b_m$tdfn,msr_par$init_smw)
# long_break_stops
b_m$tdfp=dfr(b_m$t_nest,i=1)
b_m$tdfp[abs(b_m$tdfp)>10]=0
b_m$tdfp[b_m$tdfp<0]=0
b_m$tdfp=ma(b_m$tdfp,msr_par$init_smw)
b_m$tdfp[1:5]=0
# models
# is it next necesarry?
day=c(length(unique(as.Date(b_m$datetime_))):1)
b_m$day_order=day[match(as.Date(b_m$datetime),unique(as.Date(b_m$datetime)))]
# models
#t
b_m$init_inc=ifelse(b_m$tdfn<quantile(b_m$tdfn[b_m$tdfn!=0&b_m$tohmm==T],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
if (is.null(dens_mat) || is.null(deltas) || is.null(tpm)) {
stop("Uno de los objetos de entrada es nulo.")
}
# models
#t
b_m$init_inc=ifelse(b_m$tdfn<quantile(b_m$tdfn[b_m$tdfn!=0&b_m$tohmm==T],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
# library(Rcpp)
# sourceCpp("em_pred.cpp")
em4hmm=function (hmm,nstates=2,nrep=3,tolerance=2) {
means=sapply(X = hmm$means,colMeans)
covar=array(data = unlist(lapply(hmm$covariances,"[",1:length(hmm$predictors),1:length(hmm$predictors))),
dim = c(length(hmm$predictors),
length(hmm$predictors),
nstates))
tpm=hmm$tpm[hmm$tpm[,"Seq"]==1,-ncol(hmm$tpm)]
if(length(unique(hmm$sequences))==1){
deltas=hmm$delta
} else {
deltas=colMeans(hmm$delta)
}
output={}
run=1
crit=tolerance+1
npar=length(deltas)+nstates*length(hmm$predictors)+nstates*(nstates-1)+# upraveny k pro nezavisly parametry (v ramci tpm jsou nektery hodnoty dopocitat, neobot se v radku doplnuji do jedne)
nstates*((((length(hmm$predictors)**2)-length(hmm$predictors))/2)+length(hmm$predictors))
if(any(means==0)){stop("One of means converge to 0!")}
while(crit>tolerance && run<=nrep){
dens_mat=hmm_dens(hmm=hmm,means=means,covar=covar,nstates=nstates)
### dens_mat, ktery se rovnaj 0 nastavit na nejakou minimalni hodnotu!
#dens_mat[dens_mat==0] = min(dens_mat[dens_mat>0])
dens_mat[dens_mat< 1e-307] = 1e-307
#pred=em_predict(hmm = hmm,means = means,covar = covar,nstates = nstates,deltas = deltas,tpm=tpm)
pred=em_pred(dens_mat=dens_mat,deltas = deltas,tpm=tpm)
pred[["scales"]]=1/pred[["scales"]]
xis=array(data = unlist(pred$xis),dim=c(nstates,nstates,length(pred$xis)))
rowSums(xis,dims = 1)
gammas2=t(sapply(pred[["xis"]],colSums))
results=c(logLik=-sum(log(pred[["scales"]])),AIC=-2*(-sum(log(pred[["scales"]])))+2*npar)
deltas = gammas2[1,]
tpm=rowSums(xis,dims = 2)/rowSums(xis,dims = 1)
means=t(t(t(hmm$data[-nrow(hmm$data),as.character(hmm$predictors)])%*%gammas2)/
colSums(gammas2))
covar=array(data = matrix(nrow=length(hmm$predictors),ncol=length(hmm$predictors)),dim=c(length(hmm$predictors),
length(hmm$predictors),nstates))
for(i in 1:nstates){
dev=(t(t(hmm$data[-nrow(hmm$data),as.character(hmm$predictors)])-means[,i]))
for(j in 1:length(hmm$predictors)){
for(k in 1:length(hmm$predictors)){
covar[k,j,i]=sum(gammas2[, i] * (dev[,j]*dev[,k]))/sum(gammas2[,i])
}
}
}
output[[run]]=list(results=results,deltas=deltas,tpm=tpm,means=means,vcov=covar)
if(run>1){
crit=abs(results[2]-output[[run-1]][["results"]][2])
}
run=run+1
}
#output[["summary"]]=matrix(unlist(lapply(output,"[",1)),ncol=2,byrow=T)
class(output)="emmodel"
return(output)
}
m=hmmf(formula=as.formula(paste0("init_inc~","tdfn")),
data=as.data.frame(b_m[b_m$tohmm==TRUE,]),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order[b_m$tohmm==TRUE],
tolerance=2)
# library(Rcpp)
# sourceCpp("em_pred.cpp")
em4hmm=function (hmm,nstates=2,nrep=3,tolerance=2) {
means=sapply(X = hmm$means,colMeans)
covar=array(data = unlist(lapply(hmm$covariances,"[",1:length(hmm$predictors),1:length(hmm$predictors))),
dim = c(length(hmm$predictors),
length(hmm$predictors),
nstates))
tpm=hmm$tpm[hmm$tpm[,"Seq"]==1,-ncol(hmm$tpm)]
if(length(unique(hmm$sequences))==1){
deltas=hmm$delta
} else {
deltas=colMeans(hmm$delta)
}
output={}
run=1
crit=tolerance+1
npar=length(deltas)+nstates*length(hmm$predictors)+nstates*(nstates-1)+# upraveny k pro nezavisly parametry (v ramci tpm jsou nektery hodnoty dopocitat, neobot se v radku doplnuji do jedne)
nstates*((((length(hmm$predictors)**2)-length(hmm$predictors))/2)+length(hmm$predictors))
if(any(means==0)){stop("One of means converge to 0!")}
while(crit>tolerance && run<=nrep){
dens_mat=hmm_dens(hmm=hmm,means=means,covar=covar,nstates=nstates)
### dens_mat, ktery se rovnaj 0 nastavit na nejakou minimalni hodnotu!
#dens_mat[dens_mat==0] = min(dens_mat[dens_mat>0])
dens_mat[dens_mat< 1e-307] = 1e-307
#pred=em_predict(hmm = hmm,means = means,covar = covar,nstates = nstates,deltas = deltas,tpm=tpm)
pred=em_pred(dens_mat=dens_mat,deltas = deltas,tpm=tpm)
pred[["scales"]]=1/pred[["scales"]]
xis=array(data = unlist(pred$xis),dim=c(nstates,nstates,length(pred$xis)))
rowSums(xis,dims = 1)
gammas2=t(sapply(pred[["xis"]],colSums))
results=c(logLik=-sum(log(pred[["scales"]])),AIC=-2*(-sum(log(pred[["scales"]])))+2*npar)
deltas = gammas2[1,]
tpm=rowSums(xis,dims = 2)/rowSums(xis,dims = 1)
means=t(t(t(hmm$data[-nrow(hmm$data),as.character(hmm$predictors)])%*%gammas2)/
colSums(gammas2))
covar=array(data = matrix(nrow=length(hmm$predictors),ncol=length(hmm$predictors)),dim=c(length(hmm$predictors),
length(hmm$predictors),nstates))
for(i in 1:nstates){
dev=(t(t(hmm$data[-nrow(hmm$data),as.character(hmm$predictors)])-means[,i]))
for(j in 1:length(hmm$predictors)){
for(k in 1:length(hmm$predictors)){
covar[k,j,i]=sum(gammas2[, i] * (dev[,j]*dev[,k]))/sum(gammas2[,i])
}
}
}
output[[run]]=list(results=results,deltas=deltas,tpm=tpm,means=means,vcov=covar)
if(run>1){
crit=abs(results[2]-output[[run-1]][["results"]][2])
}
run=run+1
}
#output[["summary"]]=matrix(unlist(lapply(output,"[",1)),ncol=2,byrow=T)
class(output)="emmodel"
return(output)
}
summary.emmodel=function(object,...){
cat("Nazdar smrade!\n")
cat("\nConvergence:\n")
print(matrix(unlist(lapply(object,"[",1)),ncol=2,byrow=T))
}
b_m$hmm_t[b_m$tohmm==T]=m$predstate-1#
# t_ends
b_m$init_inc=ifelse(b_m$tdfp>quantile(b_m$tdfp[b_m$tdfp!=0],.25),0,1)
m=hmmf(formula=as.formula(paste0("init_inc~","tdfp")),
data=as.data.frame(b_m),loo=F,em=T,sequences="day_order",
nrep=30,full.output=T,
independent.seq=b_m$day_order,
tolerance=2)
# library(Rcpp)
# sourceCpp("em_pred.cpp")
em4hmm=function (hmm,nstates=2,nrep=3,tolerance=2) {
means=sapply(X = hmm$means,colMeans)
covar=array(data = unlist(lapply(hmm$covariances,"[",1:length(hmm$predictors),1:length(hmm$predictors))),
dim = c(length(hmm$predictors),
length(hmm$predictors),
nstates))
tpm=hmm$tpm[hmm$tpm[,"Seq"]==1,-ncol(hmm$tpm)]
if(length(unique(hmm$sequences))==1){
deltas=hmm$delta
} else {
deltas=colMeans(hmm$delta)
}
output={}
run=1
crit=tolerance+1
npar=length(deltas)+nstates*length(hmm$predictors)+nstates*(nstates-1)+# upraveny k pro nezavisly parametry (v ramci tpm jsou nektery hodnoty dopocitat, neobot se v radku doplnuji do jedne)
nstates*((((length(hmm$predictors)**2)-length(hmm$predictors))/2)+length(hmm$predictors))
if(any(means==0)){stop("One of means converge to 0!")}
while(crit>tolerance && run<=nrep){
dens_mat=hmm_dens(hmm=hmm,means=means,covar=covar,nstates=nstates)
### dens_mat, ktery se rovnaj 0 nastavit na nejakou minimalni hodnotu!
#dens_mat[dens_mat==0] = min(dens_mat[dens_mat>0])
dens_mat[dens_mat< 1e-307] = 1e-307
#pred=em_predict(hmm = hmm,means = means,covar = covar,nstates = nstates,deltas = deltas,tpm=tpm)
pred=em_pred(dens_mat=dens_mat,deltas = deltas,tpm=tpm)
pred[["scales"]]=1/pred[["scales"]]
xis=array(data = unlist(pred$xis),dim=c(nstates,nstates,length(pred$xis)))
rowSums(xis,dims = 1)
gammas2=t(sapply(pred[["xis"]],colSums))
results=c(logLik=-sum(log(pred[["scales"]])),AIC=-2*(-sum(log(pred[["scales"]])))+2*npar)
deltas = gammas2[1,]
tpm=rowSums(xis,dims = 2)/rowSums(xis,dims = 1)
means=t(t(t(hmm$data[-nrow(hmm$data),as.character(hmm$predictors)])%*%gammas2)/
colSums(gammas2))
covar=array(data = matrix(nrow=length(hmm$predictors),ncol=length(hmm$predictors)),dim=c(length(hmm$predictors),
length(hmm$predictors),nstates))
for(i in 1:nstates){
dev=(t(t(hmm$data[-nrow(hmm$data),as.character(hmm$predictors)])-means[,i]))
for(j in 1:length(hmm$predictors)){
for(k in 1:length(hmm$predictors)){
covar[k,j,i]=sum(gammas2[, i] * (dev[,j]*dev[,k]))/sum(gammas2[,i])
}
}
}
output[[run]]=list(results=results,deltas=deltas,tpm=tpm,means=means,vcov=covar)
if(run>1){
crit=abs(results[2]-output[[run-1]][["results"]][2])
}
run=run+1
}
#output[["summary"]]=matrix(unlist(lapply(output,"[",1)),ncol=2,byrow=T)
class(output)="emmodel"
return(output)
}
summary.emmodel=function(object,...){
cat("Nazdar smrade!\n")
cat("\nConvergence:\n")
print(matrix(unlist(lapply(object,"[",1)),ncol=2,byrow=T))
}
b_m$hmm_tl=m$predstate-1#
#save(b_m,file=paste(comp_data,file,sep="/"))
}
# postprocessing
{
b_m$hmm_comb=b_m$hmm_t
# Delete gaps within RFID-identified incubations
b_m$hmm_comb[b_m$who %in% c("m","f")]=1
# Delete short incubation bouts
b_m$tdfn_bout=bout_nr(b_m$hmm_t)
b_m$tdfn_bl=bout_length(b_m$hmm_t)
b_m$hmm_comb[b_m$hmm_comb==1 & b_m$tdfn_bl<msr_par$sbout_length]=0
# Delete incubation breaks with negligible temperature decrease
b_m$tdfn_bout=bout_nr(b_m$hmm_comb)
b_m$tdfn_bl=bout_length(b_m$hmm_comb)
b_m$tdfn_drop=bout_drop(b_m$tdfn,b_m$tdfn_bout)
b_m$hmm_comb[b_m$hmm_comb==0 & b_m$tdfn_drop> msr_par$sgap_drop ]=1
# Identify ends of long gaps by the tdfp
b_m$tdfn_bout=bout_nr(b_m$hmm_comb)
b_m$tdfn_bl=bout_length(b_m$hmm_comb)
b_m$tdfn_drop=bout_drop(b_m$tdfn,b_m$tdfn_bout)
b_m$tdfp_bout=bout_nr(b_m$hmm_tl)
b_m$tdfp_bl=bout_length(b_m$hmm_tl)
b_m$tdfp_max=bout_summ(b_m$tdfp,b_m$tdfp_bout,max)
# tdfp bouts to be used
b_m$hmm_tl[b_m$hmm_tl==0 & b_m$tdfp_max<quantile(b_m$tdfp_max[b_m$hmm_tl==0],msr_par$sstop_max_kvant)]=1
# gaps to be used
x=unique(b_m$tdfn_bout[b_m$hmm_comb==0 &
b_m$tdfn_bl>msr_par$lgap_length &
b_m$tdfn_drop <msr_par$lgap_drop])
x1=which(b_m$hmm_tl==0)
for (i in x) {
start=min(which(b_m$tdfn_bout==i))
end=min(min(x1[x1>start+50]),nrow(b_m))
b_m$hmm_comb[start:end]=0
}
# identify significant temperature increase as an incubation
b_m$hmm_comb[b_m$tdfp>msr_par$ib_max]=1
# Delete gaps within RFID-identified incubations
b_m$hmm_comb[b_m$who %in% c("m","f")]=1
}
if(nrow(b_m)>0){
b_m_[,setdiff(names(b_m),names(b_m_))]=NA
b=rbind(b_m,b_m_)
}
save(b,file=paste(comp_data,file,sep="/"))
if (is.na(file)) {
stop("El nombre del archivo es NA. Por favor, proporciona un nombre de archivo válido.")
}
save(b,file=paste(comp_data,file,sep="/"))
comp_data='Data_all_computed'# asi dohromady i s postprocessingem
save(b,file=paste(comp_data,file,sep="/"))
comp_data <- "Data_all_computed"
file <- "my_data.RData"  # Asegúrate de que 'file' tenga un nombre válido
if (is.na(file)) {
stop("El nombre del archivo es NA. Por favor, proporciona un nombre de archivo válido.")
}
if (!dir.exists(comp_data)) {
dir.create(comp_data, recursive = TRUE)
}
save(b, file = paste(comp_data, file, sep = "/"))
save(b,file=paste(comp_data,file,sep="/"))
save(b,file=paste(comp_data,file,sep="/"))
load(paste(comp_data,file,sep="/"))
report_=data.frame(nest=file,
process=c("MSR"),
type=c(ifelse(nrow(b_m)>0,b_m$type[1],NA)),
length=c(nrow(b_m)),
lgap_length=c(msr_par$lgap_length),
lgap_drop=c(msr_par$lgap_drop),
sbout_length=c(msr_par$sbout_length),
ib_max=c(msr_par$ib_max),
sgap_drop=c(msr_par$sgap_drop),
sstop_max_kvant=c(msr_par$sstop_max_kvant),
init_smw=c(msr_par$init_smw),
datetime=Sys.time()
)
report=rbind(report,report_)
save(report,file=paste(general,"report.RData",sep="/"))
# bind, save and prepare report
{
if(nrow(b_m)>0){
b_m_[,setdiff(names(b_m),names(b_m_))]=NA
b=rbind(b_m,b_m_)
}
save(b,file=paste(comp_data,file,sep="/"))
load(paste(comp_data,file,sep="/"))
# These below codes have been included by Jose to avoid warning and errors.
comp_data <- "Data_all_computed"
file <- "my_data.RData"  # Asegúrate de que 'file' tenga un nombre válido
if (is.na(file)) {
stop("El nombre del archivo es NA. Por favor, proporciona un nombre de archivo válido.")
}
if (!dir.exists(comp_data)) {
dir.create(comp_data, recursive = TRUE)
}
save(b, file = paste(comp_data, file, sep = "/")) # End of Jose’s lines
report_=data.frame(nest=file,
process=c("MSR"),
type=c(ifelse(nrow(b_m)>0,b_m$type[1],NA)),
length=c(nrow(b_m)),
lgap_length=c(msr_par$lgap_length),
lgap_drop=c(msr_par$lgap_drop),
sbout_length=c(msr_par$sbout_length),
ib_max=c(msr_par$ib_max),
sgap_drop=c(msr_par$sgap_drop),
sstop_max_kvant=c(msr_par$sstop_max_kvant),
init_smw=c(msr_par$init_smw),
datetime=Sys.time()
)
report=rbind(report,report_)
save(report,file=paste(general,"report.RData",sep="/"))
}
if(nrow(b)>0){
# visualization
{
setwd(plots)
b$t_nest[1]=min(b$t_surface)
b$t_surface[1]=max(b$t_nest)
b$t_nest[2]=max(b$t_surface)
b$t_surface[2]=min(b$t_nest)
# pridat do nadpisu typ loggeru!
#     actogram_unip_hmm(x=b,sex=NULL,datetime="datetime_",hmm_lines = T,
#                        t.in="t_nest",t.out="t_surface",h.in="h_nest",
#                        h.out="h_surface",l.in="l_nest",l.out="l_surface",
#                        issues=NULL,issue_what=NULL,
#                        hmm_inc="hmm_comb",ref_inc="hmm_t",
#                        visits="visit",visit_what="visit_what",
#                        col.t.in="red",col.t.in_gap = "yellow",col.t.out="orange",
#                        col.h.in="dodgerblue4",col.h.out="lightblue",
#                        col.l.in=NULL,col.l.out=NULL,col.hmm.inc="green", col.ref.inc="black",
#                        lwd=.5,type="PNG",nest=paste("hmm_t",
#                                                     substr(file,1,nchar(file)-6),
#                                                     sep = "_"))
b$sex=toupper(b$who)
b$sex[b$sex=="DISTURB"]=NA
# numeric time of day
b$time_num=as.numeric(substr(b$datetime_,12,13))+
as.numeric(substr(b$datetime_,15,16))/60+
as.numeric(substr(b$datetime_,18,19))/3600
actogram_rwl_hmm(x=b,sex=NULL,datetime="datetime_",hmm_lines = T,
t.in="t_nest",t.out="t_surface",h.in="h_nest",
h.out="h_surface",
hmm_inc="hmm_comb",ref_inc="hmm_t",
visits="visit",visit_what="visit_what",bouts="who",
col.t.in="red",col.t.in_gap = "yellow",col.t.out="orange",
col.h.in="dodgerblue4",col.h.out="lightblue",col.m="dodgerblue4", col.f="firebrick3",
col.l.in=NULL,col.l.out=NULL,col.hmm.inc="green", col.ref.inc="black",
lwd=.5,type="PNG",nest=b$nest[1],
device="new")
}
}
